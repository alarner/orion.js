var c = function() {
	this._interface = "Router";
	this._routes = [];

	/*
	 * Add a route to the Router. The route specifies which namespace, class, 
	 * and method should be executed given a uri pattern.
	 *
	 * @param	pattern		The pattern to match. The pattern can be a literal 
	 *						uri (like index/login) or it can contain wildcards 
	 *						(like index/user/(:num)). Valid wildcards are...
	 *							- (:any)
	 *							- (:num)
	 *							- (:nonum)
	 *							- (:alpha)
	 *							- (:alnum)
	 *							- (:hex)
	 *
	 * @param	func		A callback function that takes the matches of the pattern
	 *						as arguments and returns an object with the following properties:
	 *							- func: the function to call based on the url
	 *							- obj: 	the object that that function is a member of (optional)
	 */
	this.addRoute = function(pattern, callback) {
		pattern = pattern.replace(/^\/|\/$/g, "");
		pattern = pattern.replace(/\:any/g, ".*");
		pattern = pattern.replace(/\:num/g, "[0-9]+");
		pattern = pattern.replace(/\:nonum/g, "[^0-9]+");
		pattern = pattern.replace(/\:alpha/g, "[A-Za-z]+");
		pattern = pattern.replace(/\:alnum/g, "[A-Za-z0-9]+");
		pattern = pattern.replace(/\:hex/g, "[A-Fa-f0-9]+");
		var re = new RegExp(pattern, "i");
		this._routes.push({
			"regex": re,
			"callback": callback
		});
	};

	/*
	 * Gets information about a route given a uri.
	 *
	 * @param	uri	The uri to match.
	 *
	 * @return 	an array with route information. The return value will have 
	 *			the following properties:
	 *				- uri: 			The uri that was matched.
	 *				- callback: 	A callback function that takes the matches
	 * 								of the pattern as arguments and returns a
	 * 								function to call when executing the route.
	 * 				- matches:		The array of matches
	 */
	this.getRoute = function(uri) {
		preppedUri = uri.replace(/^\/|\/$/g, "");
		for(var i=0; i<this._routes.length; i++) {
			var matches = preppedUri.match(this._routes[i].regex);
			if(matches !== null && matches.length > 1) {
				var m = [];
				for(var j=1; j<matches.length; j++) {
					m.push(matches[j]);
				}
				return {'uri': uri, 'callback': this._routes[i].callback, 'matches': m};
			}
		}
		return false;
	};
}

module.exports = new c();